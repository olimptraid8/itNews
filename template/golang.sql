
SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


CREATE TABLE `articles` (
  `id` int(10) UNSIGNED NOT NULL,
  `title` varchar(100) NOT NULL,
  `anons` varchar(255) NOT NULL,
  `full_text` text NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;


INSERT INTO `articles` (`id`, `title`, `anons`, `full_text`) VALUES
(8, 'Другая новая статья', 'А здесь должен был быть анонс статьи', 'Данный блок предназначен для полного текста статьи и он будет посторяться. Данный блок предназначен для полного текста статьи и он будет посторяться. Данный блок предназначен для полного текста статьи и он будет посторяться. Данный блок предназначен для полного текста статьи и он будет посторяться. Данный блок предназначен для полного текста статьи и он будет посторяться. Данный блок предназначен для полного текста статьи и он будет посторяться. '),
(7, 'Go (часто также golang)', 'Go (часто также golang) — компилируемый многопоточный язык программирования, разработанный внутри компании Google[8]. Разработка Go началась в сентябре 2007 года, его непосредственным проектированием занимались Роберт Гризмер, Роб Пайк и Кен Томпсон', 'Назначение, идеология\r\n\r\nЯзык Go разрабатывался как язык программирования для создания высокоэффективных программ, работающих на современных распределённых системах и многоядерных процессорах. Он может рассматриваться как попытка создать замену языкам Си и C++ с учётом изменившихся компьютерных технологий и накопленного опыта разработки крупных систем[12]. По словам Роба Пайка[12], «Go был разработан для решения реальных проблем, возникающих при разработке программного обеспечения в Google». В качестве основных таких проблем он называет:\r\n\r\n    медленную сборку программ;\r\n    неконтролируемые зависимости;\r\n    использование разными программистами разных подмножеств языка;\r\n    затруднения с пониманием программ, вызванные неудобочитаемостью кода, плохим документированием и так далее;\r\n    дублирование разработок;\r\n    высокую стоимость обновлений;\r\n    несинхронные обновления при дублировании кода;\r\n    сложность разработки инструментария;\r\n    проблемы межъязыкового взаимодействия.\r\n\r\nОсновными требованиями к языку стали[13]:\r\n\r\n    Ортогональность. Язык должен предоставлять небольшое число средств, не повторяющих функциональность друг друга.\r\n    Простая и регулярная грамматика. Минимум ключевых слов, простая, легко разбираемая грамматическая структура, легко читаемый код.\r\n    Простая работа с типами. Типизация должна обеспечивать безопасность, но не превращаться в бюрократию, лишь увеличивающую код. Отказ от иерархии типов, но с сохранением объектно-ориентированных возможностей.\r\n    Отсутствие неявных преобразований.\r\n    Сборка мусора.\r\n    Встроенные средства распараллеливания, простые и эффективные.\r\n    Поддержка строк, ассоциативных массивов и коммуникационных каналов.\r\n    Чёткое разделение интерфейса и реализации.\r\n    Эффективная система пакетов с явным указанием зависимостей, обеспечивающая быструю сборку.\r\n\r\nGo создавался в расчёте на то, что программы на нём будут транслироваться в объектный код и исполняться непосредственно, не требуя виртуальной машины, поэтому одним из критериев выбора архитектурных решений была возможность обеспечить быструю компиляцию в эффективный объектный код и отсутствие чрезмерных требований к динамической поддержке.\r\n\r\nВ результате получился язык, «который не стал прорывом, но тем не менее явился отличным инструментом для разработки крупных программных проектов»[12].\r\n\r\nХотя для Go доступен и интерпретатор, практически в нём нет большой потребности, так как скорость компиляции достаточно высока для обеспечения интерактивной разработки.\r\nОсновные возможности языка\r\n\r\nОсновные возможности языка Go[9]:\r\n\r\n    Go — язык со строгой статической типизацией. Доступен автоматический вывод типов, для пользовательских типов — «утиная типизация».\r\n    Полноценная поддержка указателей, но без возможности применять к ним арифметические операции, в отличие от C/C++/D.\r\n    Строковый тип со встроенной поддержкой юникода.\r\n    Использование динамических массивов, хеш-таблиц (словарей), срезов (слайсов), вариант цикла для обхода коллекции.\r\n    Средства функционального программирования: неименованные функции, замыкания, передача функций в параметрах и возврат функциональных значений.\r\n    Автоматическое управление памятью со сборщиком мусора.\r\n    Средства объектно-ориентированного программирования ограничиваются интерфейсами. Полиморфное поведение обеспечивается реализацией интерфейсов типами. Наследование реализации отсутствует, но типы-структуры могут включать другие типы-структуры в себя.\r\n    Средства параллельного программирования: встроенные в язык потоки (go routines), взаимодействие потоков через каналы и другие средства организации многопоточных программ.\r\n    Достаточно лаконичный и простой синтаксис, основанный на Си, но существенно доработанный, с большим количеством синтаксического сахара.\r\n\r\nGo не содержит целого ряда популярных синтаксических средств, доступных в других современных языках прикладного программирования. Во многих случаях это вызвано сознательным решением разработчиков. Краткие обоснования выбранных проектных решений можно найти в «Часто задаваемых вопросах»[9] по языку, более подробные — в опубликованных на сайте языка статьях и обсуждениях, рассматривающих различные варианты дизайна. В частности:\r\n\r\n    Структурная запись обработчиков исключений сочтена провоцирующей на пропуск ошибок или неадекватную их обработку. К тому же поддержка исключений серьёзно усложняется в приложениях с параллельно работающими частями. Вместо неё предлагается проверка кодов возврата с использованием многозначных функций и специального интерфейса error, а также применение отложенных (deferred) функций для перехвата исключительных ситуаций.\r\n    Наследование реализации, как считают авторы, приводит к созданию кода с неявными зависимостями, избыточно сложного в поддержке. Аналогичные возможности, но без свойственных наследованию нежелательных эффектов, обеспечиваются поддержкой вложения типов и свободно определяемыми интерфейсами.\r\n    Обобщённое программирование. Авторы воздержались от его включения в первую версию языка, поскольку, по их словам[9], предоставляемые им возможности не окупают требуемого усложнения компилятора и runtime-библиотек, а уже имеющиеся в языке средства (пустые интерфейсы, «утиная типизация» и рефлексия) позволяют создавать обобщённый код без специальных синтаксических механизмов. Тем не менее, обсуждается вопрос о включении таких средств в проектируемую вторую версию языка[⇨].\r\n    Использование утверждений (assertion) было сочтено ненужным.\r\n    Переопределение методов и функций было исключено из соображений надёжности и эффективности компиляции: требование различного именования всех методов на одном уровне видимости устраняет необходимость сопоставлять списки параметров при компиляции вызовов функций и методов и исключает ошибочный вызов другого одноимённого метода; при этом сама возможность переопределения есть не более чем синтаксический сахар.\r\n    Ряд операций над массивами и срезами (например, вставка элемента в середину) не включен в язык, поскольку они достаточно затратны. Возможность их выполнения одной простой командой провоцировала бы программиста на создание неэффективного кода, отсутствие таких команд в языке, напротив, является стимулом для рассмотрения альтернативных решений.\r\n    Поддержка отрицательных индексов,[14] доступная в ряде популярных языков, может стать причиной труднообнаруживаемых ошибок: появление отрицательного индекса из-за ошибки в коде вместо того, чтобы привести к фатальному сбою, вызовет внешне корректное обращение не к тем элементам массива, что проявится только в неверных результатах и может быть обнаружено далеко не сразу.\r\n    Принцип «любое выражение возвращает значение» провоцирует программиста на создание сложных, трудно воспринимаемых и чреватых неочевидными ошибками выражений (вроде копирования строки на Си командой из трёх слов: while (*ptr1++ = *ptr2++);). При этом современные технологии оптимизации обеспечат одинаковый объектный код и для экстремально сокращённого выражения, и для аналогичного ему фрагмента, написанного безо всяких ухищрений.');


CREATE TABLE `users` (
  `id` int(5) UNSIGNED NOT NULL,
  `name` varchar(50) NOT NULL,
  `age` int(5) UNSIGNED NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

INSERT INTO `users` (`id`, `name`, `age`) VALUES
(1, 'Bob', 25),
(2, 'Jake', 15);

es for table `articles`

ALTER TABLE `articles`
  ADD PRIMARY KEY (`id`);

ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);


ALTER TABLE `articles`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

ALTER TABLE `users`
  MODIFY `id` int(5) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;
COMMIT;
